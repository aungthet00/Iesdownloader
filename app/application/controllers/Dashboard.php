<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Dashboard extends CI_Controller
{
	public function __construct()
	{
		parent::__construct();
		$this->load->model('lamp_model');
		$this->load->model('cct_model');
		$this->load->model('cri_model');
		$this->load->model('angle_model');
		$this->load->model('candela_model');
		$this->load->model('fixture_model');
		$this->load->model('accessory_model');
		$this->load->library('session');
	}

	public function index()
	{
		redirect('dashboard/create');
	}

	function create()
	{
		$data['lamp_categories'] = $this->lamp_model->get_lamp_categories();

		$this->load->view("template/header");
		$this->load->view("dashboard/create", $data);
		$this->load->view("template/footer");
	}

	function generate()
	{
		if( ! $this->input->post())
		{
			redirect('dashboard/create');
		}

		$lamp_id = $this->input->post('lamp');

		// See if fixture and accessories are selected and assign them.
		$fixture_id = ($this->input->post('fixture')) ? $this->input->post('fixture') : NULL;
		$accessory_ids = ($this->input->post('accessories')) ? $this->input->post('accessories') : NULL;

		// Default values for cri and cct in case they are not selected.
		$cri['factor']	= 1.0;
		$cct['factor'] = 1.0;
		$cct['cct'] = '';
		$cri['cri'] = '';

		// Assign original cct and cri if selected.
		if(($this->input->post('cri') && $this->input->post('cct')) != null)
		{
			$cri = $this->cri_model->get_cri($this->input->post('cri'));
			$cct = $this->cct_model->get_cct($this->input->post('cct'));
		}

		$output['cct'] = $cct;
		$output['cri'] = $cri;

		// Lamp calculations begin from here.
		$lamp = $this->lamp_model->get_lamp($lamp_id);
		$output['lamp'] = $lamp;
		$lamp_group_id = $lamp['group_id'];
		$lamp['angles'] = [];

		// Values for horizontal angles.
		$lamp['x_values'] = $this->angle_model->get_horizontal_angles($lamp_group_id, 'l');

		// No. of vertical and horizontal angles.
		$output['vertical_angles'] = $lamp['vertical_angles'];
		$output['horizontal_angles'] = $lamp['horizontal_angles'];

		// Getting angles for each horizontal row.
		foreach ($lamp['x_values'] as $x_value) {
			$lamp['angles'][] = $this->angle_model->get_vertical_angles_by_horizontal_group(
				$lamp_group_id, 'l', $x_value['x_value']);
		}

		// Getting y values for the lamp plus calculating single row result for
		// the single row lamp (lamp has only one horizontal row of results).
		foreach ($lamp['angles'][0] as $angle) {
			$output['y_values'][] = $angle['y_value'];
			$output['result'][0][] = calculate_output($angle['factor'], $lamp['factor'], $cct['factor'], $cri['factor']);
		}

		// Get the x values for a lamp. This loop will always run once but for 
		// the sake of similarity of code between lamps, fixtures and accessories
		// I let it stay in the loop.
		foreach ($lamp['x_values'] as $x_value) {
			$output['x_values'][] = $x_value['x_value'];
		}

		// Name of the file to download
		$output['file_name'] = $lamp['module'] . ' ' . $cct['cct'] . ' ' . $cri['cri'];
		
		if ($fixture_id)
		{
			// Storing temp to multiply it with the fixture conversion factors
			// to get the next results.
			$temp = $output['result'];

			// Reassigning x and y values because they are now going to be changed
			// according to fixture not the lamp.
			$output['x_values'] = array();
			$output['y_values'] = array();

			$fixture = $this->fixture_model->get_fixture($fixture_id);
			$output['fixture'] = $fixture;
			$fixture['angles'] = [];
			$fixture_group_id = $fixture['group_id'];
			$fixture['x_values'] = $this->angle_model->get_horizontal_angles($fixture_group_id, 'f');

			foreach ($fixture['x_values'] as $x_value) {
				$fixture['angles'][] = $this->angle_model->get_vertical_angles_by_horizontal_group(
					$fixture_group_id, 'f', $x_value['x_value']);
			}

			for ($i=0; $i < sizeof($fixture['x_values']); $i++) { 
				if( ! isset($output['result'][$i]))
				{
					$output['result'][$i] = array();
				}

				for ($j=0; $j < sizeof($fixture['angles'][$i]); $j++) { 

					// The angles which are going to be shown above the results
					// should be added once.
					if ($i == 0) {
						$output['y_values'][] = $fixture['angles'][$i][$j]['y_value'];
					}

					// Each row of fixture will be multiplied with the single row
					// of results generated by the lamp selected.
					$result = $temp[0][$j] * $fixture['angles'][$i][$j]['factor'];
					$output['result'][$i][$j] = $result;
				}
			}

			foreach ($fixture['x_values'] as $x_value) {
				$output['x_values'][] = $x_value['x_value'];
			}

			$output['vertical_angles'] = $fixture['vertical_angles'];
			$output['horizontal_angles'] = $fixture['horizontal_angles'];

			// Name of the file to download
			$output['file_name'] = $fixture['fixture'] . ' ' . $lamp['module'] . ' ' . $cct['cct'] . ' ' . $cri['cri'];
		}
		
		if ($accessory_ids)
		{
			$temp = $output['result'];
			$output['x_values'] = array();
			$output['y_values'] = array();

			$accessories = $this->accessory_model->get_accessories_by_ids($accessory_ids);

			// Validate number of accessories selected.
			$cp_found = false;
			foreach ($accessories as $accessory) {
				if ($accessory['accessory'] === "COMFORT PRO") {
					$cp_found = true;
					break;
				}
			}
			if (($cp_found && sizeof($accessories) > 3) || ( ! $cp_found && 
				sizeof($accessories) > 2))
			{
				$this->session->set_flashdata('accessories_error', 'Select at most 3 accessories if CP selected otherwise only 2.');
				redirect('dashboard/create');
			}

			// get angles for each accessory.
			for ($i=0; $i < sizeof($accessories); $i++) {
				$accessories[$i]['angles'] = [];
				$accessory_group_id = $accessories[$i]['group_id'];
				$accessories[$i]['x_values'] = $this->angle_model->get_horizontal_angles($accessory_group_id, 'a');
				foreach ($accessories[$i]['x_values'] as $x_value) {
					$accessories[$i]['angles'][] = $this->angle_model->get_vertical_angles_by_horizontal_group(
						$accessory_group_id, 'a', $x_value['x_value']);
				}
			}

			// if there's LSL selected, move it to the last.
			for ($i = 0; $i < sizeof($accessories); $i++) {
				if ($accessories[$i]['accessory'] === "LSL") {
					$a = $accessories[$i];
					unset($accessories[$i]);
					$accessories[$i] = $a;
					break;
				}
			}
			
			// get names of all accessories
			$output['accessories_names'] = '';
			foreach ($accessories as $accessory) {
				$output['accessories_names'] .= $accessory['accessory'] . ' ';
			}

			// Name of the file to download
			$output['file_name'] = $fixture['fixture'] . ' ' . $output['accessories_names'] . $lamp['module'] . ' ' . $cct['cct'] . ' ' . $cri['cri'];

			foreach (end($accessories)['x_values'] as $x_value) {
				$output['x_values'][] = $x_value['x_value'];
			}

			for ($j=0; $j < sizeof(end($accessories)['angles'][0]); $j++) { 
				$output['y_values'][] = end($accessories)['angles'][0][$j]['y_value'];
			}

			foreach ($accessories as $accessory) 
			{
				for ($i = 0; $i < $accessory['horizontal_angles']; $i++) 
				{
					if ( ! isset($output['result'][$i]))
					{
						$output['result'][$i] = [];
					}
					for ($j = 0; $j < $accessory['vertical_angles']; $j++)
					{
						$output['result'][$i][$j] = $temp[0][$j] * $accessory
							['angles'][$i][$j]['factor'];
					}
				}
				$temp = $output['result'];
			}


			$output['vertical_angles'] = end($accessories)['vertical_angles'];
			$output['horizontal_angles'] = end($accessories)['horizontal_angles'];
		}

		// Make the result beautiful just by formatting it to one decimal place.
		for ($i=0; $i < sizeof($output['result']); $i++) { 
			for ($j=0; $j < sizeof($output['result'][$i]); $j++) { 
				$output['result'][$i][$j] = number_format($output['result'][$i][$j], 1, ".", "");
			}
		}

		echo json_encode($output);

		// $this->load->view("template/header");
		// $this->load->view("dashboard/generate", $output);
		// $this->load->view("template/footer");
	}

	public function get_fixtures($lamp_id)
	{
		$fixtures = $this->fixture_model->get_compatible_fixtures($lamp_id);
		$res = array();

		if (empty($fixtures))
		{
			$res['status'] = 404;
			$res['error'] = "This lamp doesn't have any fixtures associated with it.";
		}
		else
		{
			$res['status'] = 200;
			$res['data'] = $fixtures;
		}

		echo json_encode($res);
	}

	public function get_cri_cct($lamp_id)
	{
		$data = $this->fixture_model->get_compatible_cri_cct($lamp_id);
		if ($data === null)
		{
			$res['status'] = 404;
			$res['error'] = "There's no need of cct and cri for this lamp";
		}
		else
		{
			$res['status'] = 200;
			$res['data'] = $data;
		}

		echo json_encode($res);
	}

	public function get_accessories($lamp_id, $fixture_id)
	{
		$data = $this->accessory_model->get_compatible_accessories($lamp_id, $fixture_id);
		if ( ! empty($data))
		{
			$res['status'] = 200;
			$res['data'] = $data;
		}
		else
		{
			$res['status'] = 404;
			$res['error'] = "No accessories found";
		}

		echo json_encode($res);
	}

	public function get_lamps_by_category()
	{
		$data = $this->lamp_model->get_lamps_by_category($this->input->get('cat'));
		if ( ! empty($data))
		{
			$res['status'] = 200;
			$res['data'] = $data;
		}
		else
		{
			$res['status'] = 404;
			$res['error'] = "No LED modules found";
		}

		echo json_encode($res);

	}
}
